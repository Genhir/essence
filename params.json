{"name":"Essence","tagline":"A simple PHP library to extract information about web pages, like youtube videos, twitter statuses or blog articles.","body":"Installation\r\n------------\r\n\r\n```\r\ncomposer require essence/essence\r\n```\r\n\r\nExample\r\n-------\r\n\r\nEssence is designed to be really easy to use.\r\nUsing the main class of the library, you can retrieve information in just those few lines:\r\n\r\n```php\r\n$Essence = new Essence\\Essence();\r\n$Media = $Essence->extract('http://www.youtube.com/watch?v=39e3KYAmXK4');\r\n\r\nif ($Media) {\r\n\t// That's all, you're good to go !\r\n}\r\n```\r\n\r\nThen, just do anything you want with the data:\r\n\r\n```html+php\r\n<article>\r\n\t<header>\r\n\t\t<h1><?php echo $Media->title; ?></h1>\r\n\t\t<p>By <?php echo $Media->authorName; ?></p>\r\n\t</header>\r\n\r\n\t<div class=\"player\">\r\n\t\t<?php echo $Media->html; ?>\r\n\t</div>\r\n</article>\r\n```\r\n\r\nWhat you get\r\n------------\r\n\r\nUsing Essence, you will mainly interact with Media objects.\r\nMedia is a simple container for all the information that are fetched from an URL.\r\n\r\nHere are the default properties it provides:\r\n\r\n* type\r\n* version\r\n* url\r\n* title\r\n* description\r\n* authorName\r\n* authorUrl\r\n* providerName\r\n* providerUrl\r\n* cacheAge\r\n* thumbnailUrl\r\n* thumbnailWidth\r\n* thumbnailHeight\r\n* html\r\n* width\r\n* height\r\n\r\nThese properties were gathered from the OEmbed and OpenGraph specifications, and merged together in a united interface.\r\nBased on such standards, these properties should be a solid starting point.\r\n\r\nHowever, \"non-standard\" properties can and will also be setted.\r\n\r\nHere is how you can manipulate the Media properties:\r\n\r\n```php\r\n// through dedicated methods\r\nif (!$Media->has('foo')) {\r\n\t$Media->set('foo', 'bar');\r\n}\r\n\r\n$value = $Media->get('foo');\r\n\r\n// or directly like a class attribute\r\n$Media->customValue = 12;\r\n```\r\n\r\nNote that Essence will always try to fill the `html` property when it is not available.\r\n\r\nAdvanced usage\r\n--------------\r\n\r\nThe Essence class provides some useful utility functions to ensure you will get some information.\r\n\r\n### Extracting URLs\r\n\r\nThe `crawl()` method lets you extract embeddable URLs from a web page.\r\n\r\nFor example, here is how you could get the URL of all videos in a blog post:\r\n\r\n```php\r\n$urls = $Essence->crawl('http://www.blog.com/article');\r\n```\r\n```\r\narray(2) {\r\n\t[0] => 'http://www.youtube.com/watch?v=123456',\r\n\t[1] => 'http://www.dailymotion.com/video/a1b2c_lolcat-fun'\r\n}\r\n```\r\n\r\nYou can then get information from all the extracted URLs:\r\n\r\n```php\r\n$medias = $Essence->extractAll($urls);\r\n```\r\n```\r\narray(2) {\r\n\t['http://www.youtube.com/watch?v=123456'] => object(Media) {}\r\n\t['http://www.dailymotion.com/video/a1b2c_lolcat-fun'] => object(Media) {}\r\n}\r\n```\r\n\r\n### Replacing URLs in text\r\n\r\nEssence can replace any embeddable URL in a text by information about it.\r\nBy default, any URL will be replaced by the `html` property of the found Media.\r\n\r\n```php\r\necho $Essence->replace('Look at this: http://www.youtube.com/watch?v=123456');\r\n```\r\n```html\r\nLook at this: <iframe src=\"http://www.youtube.com/embed/123456\"></iframe>\r\n```\r\n\r\nBut you can do more by passing a callback to control which information will replace the URL:\r\n\r\n```php\r\necho $Essence->replace($text, function($Media) {\r\n\treturn <<<HTML\r\n\t\t<p class=\"title\">$Media->title</p>\r\n\t\t<div class=\"player\">$Media->html</div>\r\nHTML;\r\n});\r\n```\r\n```html\r\nLook at this:\r\n<p class=\"title\">Video title</p>\r\n<div class=\"player\">\r\n\t<iframe src=\"http://www.youtube.com/embed/123456\"></iframe>\r\n<div>\r\n```\r\n\r\nThis makes it easy to build rich templates or even to integrate a templating engine:\r\n\r\n```php\r\necho $Essence->replace($text, function($Media) use ($TwigTemplate) {\r\n\treturn $TwigTemplate->render($Media->properties());\r\n});\r\n```\r\n\r\n### Configuring providers\r\n\r\nIt is possible to pass some options to the providers.\r\n\r\nFor example, OEmbed providers accepts the `maxwidth` and `maxheight` parameters, as specified in the OEmbed spec.\r\n\r\n```php\r\n$options = [\r\n\t'maxwidth' => 800,\r\n\t'maxheight' => 600\r\n];\r\n\r\n$Media = $Essence->extract($url, $options);\r\n$medias = $Essence->extractAll($urls, $options);\r\n$text = $Essence->replace($text, null, $options);\r\n```\r\n\r\nOther providers will just ignore the options they don't handle.\r\n\r\nConfiguration\r\n-------------\r\n\r\nEssence currently supports 68 specialized providers:\r\n\r\n```html\r\n23hq                Deviantart          Kickstarter         Sketchfab\r\nAnimoto             Dipity              Meetup              SlideShare\r\nAol                 Dotsub              Mixcloud            SoundCloud\r\nApp.net             Edocr               Mobypicture         SpeakerDeck\r\nBambuser            Flickr              Nfb                 Spotify\r\nBandcamp            FunnyOrDie          Official.fm         Ted\r\nBlip.tv             Gist                Polldaddy           Twitter\r\nCacoo               Gmep                PollEverywhere      Ustream\r\nCanalPlus           HowCast             Prezi               Vhx\r\nChirb.it            Huffduffer          Qik                 Viddler\r\nCircuitLab          Hulu                Rdio                Videojug\r\nClikthrough         Ifixit              Revision3           Vimeo\r\nCollegeHumor        Ifttt               Roomshare           Vine\r\nCoub                Imgur               Sapo                Wistia\r\nCrowdRanking        Instagram           Screenr             WordPress\r\nDailyMile           Jest                Scribd              Yfrog\r\nDailymotion         Justin.tv           Shoudio             Youtube\r\n```\r\n\r\nPlus the `OEmbed` and `OpenGraph` providers, which can be used to extract any URL.\r\n\r\nYou can configure these providers by passing a configuration array:\r\n\r\n```php\r\n$Essence = new Essence\\Essence([\r\n\t'providers' => [\r\n\t\t// the OpenGraph provider will try to extract any URL that matches\r\n\t\t// the filter\r\n\t\t'Ted' => [\r\n\t\t\t'class' => 'OpenGraph',\r\n\t\t\t'filter' => '#ted\\.com/talks/.*#i'\r\n\t\t],\r\n\r\n\t\t// the OEmbed provider will query the endpoint, :url beeing replaced\r\n\t\t// by the requested URL.\r\n\t\t'Youtube' => [\r\n\t\t\t'class' => 'OEmbed',\r\n\t\t\t'filter' => '#youtube\\.com/.*#',\r\n\t\t\t'endpoint' => 'http://www.youtube.com/oembed?format=json&url=:url'\r\n\t\t]\r\n\t]\r\n]);\r\n```\r\n\r\nYou can also load a configuration array from a file:\r\n\r\n```php\r\n$Essence = new Essence\\Essence([\r\n\t'providers' => 'path/to/config/file.php'\r\n]);\r\n```\r\n\r\nYou can use custom providers by specifying a fully-qualified class name in the 'class' option.\r\n\r\nIf no configuration is provided, the default configuration will be loaded from the `config/providers.json` file.\r\n\r\nCustomization\r\n-------------\r\n\r\nAlmost everything in Essence can be configured through dependency injection.\r\nUnder the hoods, the constructor uses a dependency injection container to return a fully configured instance of Essence.\r\n\r\nTo customize the Essence behavior, the easiest way is to configure injection settings when building Essence:\r\n\r\n```php\r\n$Essence = new Essence\\Essence([\r\n\t// the container will return a unique instance of CustomHttpClient\r\n\t// each time an HTTP client is needed\r\n\t'Http' => Essence\\Di\\Container::unique(function() {\r\n\t\treturn new CustomHttpClient();\r\n\t})\r\n]);\r\n```\r\n\r\nThe default injection settings are defined in the [Standard](https://github.com/essence/essence/blob/master/lib/Essence/Di/Container/Standard.php) container class.\r\n\r\nTry it out\r\n----------\r\n\r\nOnce you've installed essence, you should try to run `./cli/essence.php` in a terminal.\r\nThis script allows you to test Essence quickly:\r\n\r\n```\r\n# will fetch and print information about the video\r\n./cli/essence.php extract http://www.youtube.com/watch?v=4S_NHY9c8uM\r\n\r\n# will fetch and print all embeddable URLs found at the given HTML page\r\n./cli/essence.php crawl http://www.youtube.com/watch?v=4S_NHY9c8uM\r\n```\r\n\r\nThird-party libraries\r\n---------------------\r\n\r\nIf you're interested in embedding videos, you should take a look at the [Multiplayer](https://github.com/felixgirault/multiplayer) lib.\r\nIt allows you to build customizable embed codes painlessly:\r\n\r\n```php\r\n$Multiplayer = new Multiplayer\\Multiplayer();\r\n\r\nif ($Media->type === 'video') {\r\n\techo $Multiplayer->html($Media->url, [\r\n\t\t'autoPlay' => true,\r\n\t\t'highlightColor' => 'BADA55'\r\n\t]);\r\n}\r\n```\r\n","google":"UA-11935716-17","note":"Don't delete this file! It's used internally to help with page regeneration."}